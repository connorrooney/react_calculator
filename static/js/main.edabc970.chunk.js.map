{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","activeNum","storedSum","answer","displayNum","stateClear","_this","setState","activeNumPusher","newNum","concat","Object","toConsumableArray","sumPusher","operator","tempNumStr","join","sumGenerator","temp","tempArray","mathjs","eval","_this2","this","react_default","a","createElement","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edabc970.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport mathjs from 'mathjs';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    activeNum: [],\n    storedSum: [],\n    answer: 0,\n    displayNum: 0,\n  }\n\n  stateClear = () => {\n    this.setState({activeNum: []})\n    this.setState({storedSum: []})\n    this.setState({answer: 0})\n  }\n\n  activeNumPusher = (newNum) => {\n    this.setState({activeNum: [...this.state.activeNum, newNum]})\n  }\n\n  sumPusher = (operator) => {\n    let tempNumStr;\n    tempNumStr = this.state.activeNum.join(\"\");\n    this.setState({activeNum: []})\n    this.setState({storedSum: [...this.state.storedSum, tempNumStr, operator]})\n  }\n\n  sumGenerator = (temp) => {\n    let tempAnsString;\n    tempAnsString = [...this.state.storedSum, temp.join(\"\")];\n    let tempArray = tempAnsString.join('');\n    this.setState({answer: mathjs.eval(tempArray)})\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <div className=\"display-container\">\n          <h1>{this.state.activeNum}</h1>\n          <h1>{this.state.answer}</h1>\n          <h1>{this.state.displayNum}</h1>\n        </div>\n\n        <div className=\"grid-container\">\n\n          {/* Operators */}\n\n          <div className=\"ac\">\n            <button onClick={() => this.stateClear()}>A/C</button>\n          </div>\n          <div className=\"negative\">\n            <button>+/-</button>\n          </div>\n          <div className=\"percentage\">\n            <button>%</button>\n          </div>\n          <div className=\"divide\">\n            <button onClick={() => this.sumPusher(\"/\")}>÷</button>\n          </div>\n          <div className=\"multi\">\n            <button onClick={() => this.sumPusher(\"*\")}>×</button>\n          </div>\n          <div className=\"minus\">\n            <button onClick={() => this.sumPusher(\"-\")}>-</button>\n          </div>\n          <div className=\"add\">\n            <button onClick={() => this.sumPusher(\"+\")}>+</button>\n          </div>\n          <div className=\"equals\">\n            <button onClick={() => this.sumGenerator(this.state.activeNum)}>=</button>\n          </div>\n\n          {/* Numbers */}\n\n          <div className=\"zero\">\n            <button onClick={() => this.activeNumPusher(0)}>0</button>\n          </div>\n          <div className=\"point\">\n            <button onClick={() => this.activeNumPusher(\".\")}>•</button>\n          </div>\n          <div className=\"one\">\n            <button onClick={() => this.activeNumPusher(1)}>1</button>\n          </div>\n          <div className=\"two\">\n            <button onClick={() => this.activeNumPusher(2)}>2</button>\n          </div>\n          <div className=\"three\">\n            <button onClick={() => this.activeNumPusher(3)}>3</button>\n          </div>\n          <div className=\"four\">\n            <button onClick={() => this.activeNumPusher(4)}>4</button>\n          </div>\n          <div className=\"five\">\n            <button onClick={() => this.activeNumPusher(5)}>5</button>\n          </div>\n          <div className=\"six\">\n            <button onClick={() => this.activeNumPusher(6)}>6</button>\n          </div>\n          <div className=\"seven\">\n            <button onClick={() => this.activeNumPusher(7)}>7</button>\n          </div>\n          <div className=\"eight\">\n            <button onClick={() => this.activeNumPusher(8)}>8</button>\n          </div>\n          <div className=\"nine\">\n            <button onClick={() => this.activeNumPusher(9)}>9</button>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}